{
  "name": "osu-parser",
  "version": "0.2.0",
  "description": "converts osu files into javascript objects",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "lazy": "~1.0.11"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/nojhamster/osu-parser.git"
  },
  "keywords": [
    "osu",
    "beatmap",
    "parser"
  ],
  "author": {
    "name": "nojhamster"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/nojhamster/osu-parser/issues"
  },
  "homepage": "https://github.com/nojhamster/osu-parser",
  "readme": "osu-parser\r\n==========\r\n[![Build Status](https://travis-ci.org/nojhamster/osu-parser.png?branch=master)](https://travis-ci.org/nojhamster/osu-parser)\r\n\r\nA parser for **Nodejs** that converts osu files into javascript objects. Feel free to give it a try and **post issues** to help me improve it ;)\r\n\r\n- [Installation](#installation)\r\n- [Usage](#usage)\r\n- [The resulting object](#the-resulting-object)\r\n- [Methods](#methods)\r\n\t- [parseFile(filepath, callback)](#parsefilefilepath-callback)\r\n\t- [parseStream(stream, callback)](#parsestreamstream-callback)\r\n\t- [parseContent(content)](#parsecontentcontent)\r\n- [TODO](#todo)\r\n- [Changelog](https://github.com/nojhamster/osu-parser/blob/master/changelog.md)\r\n\r\n## Installation\r\n\r\n```\r\nnpm install osu-parser\r\n```\r\n\r\n## Usage\r\n\r\n```javascript\r\n  var parser = require('osu-parser');\r\n\r\n  parser.parseFile('path/to/map.osu', function (err, beatmap) {\r\n    console.log(beatmap);\r\n  });\r\n```\r\n\r\n## The resulting object\r\n\r\nSimple key/value entries like this...\r\n```\r\n...\r\nPreviewTime: 42860\r\n...\r\n```\r\n...are directly reachable as properties :\r\n```\r\nconsole.log(beatmap['PreviewTime']);\r\n// prints 42860\r\n```\r\n\r\n### Additionnal beatmap properties :\r\n<table>\r\n  <tr>\r\n    <th>name</th>\r\n    <th>type</th>\r\n    <th>description</th>\r\n  </tr>\r\n  <tr><td>fileFormat</td><td>String</td><td>osu file format (v7, v12...).</td></tr>\r\n  <tr><td>nbCircles</td><td>Integer</td><td>number of circles.</td></tr>\r\n  <tr><td>nbSliders</td><td>Integer</td><td>number of sliders.</td></tr>\r\n  <tr><td>nbSpinners</td><td>Integer</td><td>number of spinners.</td></tr>\r\n  <tr><td>bpmMin</td><td>Integer</td><td>minimum bpm.</td></tr>\r\n  <tr><td>bpmMax</td><td>Integer</td><td>maximum bpm.</td></tr>\r\n  <tr><td>maxCombo</td><td>Integer</td><td>maximum combo.</td></tr>\r\n  <tr><td>totalTime</td><td>Integer</td><td>total time in seconds (between the first timing point and the last object).</td></tr>\r\n  <tr><td>drainingTime</td><td>Integer</td><td>draining time in seconds.</td></tr>\r\n  <tr><td>tagsArray</td><td>Array</td><td>tags splitted into an array, for convenience.</td></tr>\r\n  <tr><td>breakTimes</td><td>Array</td><td>list of all break times. Each has `startTime` and `endTime` properties.</td></tr>\r\n  <tr><td>timingPoints</td><td>Array</td><td>list of all timing points. See TimingPoint below.</td></tr>\r\n  <tr><td>hitObjects</td><td>Array</td><td>list of all hitobjects. See HitObject below.</td></tr>\r\n</table>\r\n\r\n#### TimingPoint properties\r\n<table>\r\n  <tr>\r\n    <th>name</th>\r\n    <th>type</th>\r\n    <th>description</th>\r\n  </tr>\r\n  <tr><td>offset</td><td>Integer</td><td>section offset in milliseconds. (i.e. starting timingpoint offset)</td></tr>\r\n  <tr><td>beatLength</td><td>Float</td><td>length of a single beat in milliseconds (float). If negative, it's a change of velocity.</td></tr>\r\n  <tr><td>bpm</td><td>Float</td><td>number of beats per minute.</td></tr>\r\n  <tr><td>velocity</td><td>Float</td><td>velocity multiplicator. (1 if beatLength is positive)</td></tr>\r\n  <tr><td>timingSignature</td><td>Integer</td><td>3 = simple triple, 4 = simple quadruple (used in editor).</td></tr>\r\n  <tr><td>sampleSetId</td><td>Integer</td><td>sound samples. None = 0, Normal = 1, Soft = 2.</td></tr>\r\n  <tr><td>useCustomSamples</td><td>Boolean</td><td>use skin localised samples ?</td></tr>\r\n  <tr><td>sampleVolume</td><td>Integer</td><td>volume of the samples.</td></tr>\r\n  <tr><td>timingChange</td><td>Boolean</td><td>is there a beatLength change ?</td></tr>\r\n  <tr><td>kiaiTimeActive</td><td>Boolean</td><td>is it a kiai section ?</td></tr>\r\n</table>\r\n\r\n#### HitObject properties\r\n<table>\r\n  <tr>\r\n    <th>name</th>\r\n    <th>type</th>\r\n    <th>description</th>\r\n  </tr>\r\n  <tr><td>objectName</td><td>String</td><td>circle, slider, spinner or unknown.</td></tr>\r\n  <tr><td>position</td><td>Array[Integer]</td><td>object position : [x,y]</td></tr>\r\n  <tr><td>startTime</td><td>Integer</td><td>start offset.</td></tr>\r\n  <tr><td>newCombo</td><td>Boolean</td><td>is it a new combo ?</td></tr>\r\n  <tr><td>soundTypes</td><td>Array</td><td>list of sound effects. Those can be : <code>normal</code>, <code>whistle</code>, <code>finish</code>, <code>clap</code>.</td></tr>\r\n  <tr><td>additions</td><td>Object</td>\r\n    <td>\r\n      hitobject specific additions. It can have those properties :\r\n      <br/>-<code>sample</code>: object specific sample. It can be : <code>soft</code>, <code>normal</code>, <code>drum</code>.\r\n      <br/>-<code>additionalSample</code>: a sample to add along with the current one. It can be : <code>soft</code>, <code>normal</code>, <code>drum</code>.\r\n      <br/>-<code>customSampleIndex</code>: index of the custom sample to use (ex: normal-2).\r\n      <br/>-<code>hitsoundVolume</code>: specific volume for this object (require <code>hitsound</code> to be an existing file).\r\n      <br/>-<code>hitsound</code>: an file to use as hitsound. It disables all other hitsounds.\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n##### Slider specific properties\r\n<table>\r\n  <tr>\r\n    <th>name</th>\r\n    <th>type</th>\r\n    <th>description</th>\r\n  </tr>\r\n  <tr><td>repeatCount</td><td>Integer</td><td>number of repeats, starts at <code>1</code> for a single-way slider.</td></tr>\r\n  <tr><td>pixelLength</td><td>Integer</td><td>length in osu-relative pixels.</td></tr>\r\n  <tr><td>curveType</td><td>String</td><td>can be catmull, bezier, linear or pass-through.</td></tr>\r\n  <tr><td>points</td><td>Array</td><td>list of all points including the very first. Each point is an array of coordinates [x,y].</td></tr>\r\n  <tr><td>endPosition</td><td>Array</td><td>coordinates of the slider end ([x,y]). (not calculated for catmull)</td></tr>\r\n  <tr><td>edges</td><td>Array</td>\r\n    <td>\r\n      list of edges. The number of edges is <code>repeatCount + 1</code>. It has two properties :\r\n      <br/>-<code>soundTypes</code>: list of sound effects. Those can be : normal, whistle, finish, clap.\r\n      <br/>-<code>additions</code>: edge additions. Same as hitobject additions, but can only have <code>sample</code> and <code>additionalSample</code>.\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n##### Spinner specific properties\r\n<table>\r\n  <tr>\r\n    <th>name</th>\r\n    <th>type</th>\r\n    <th>description</th>\r\n  </tr>\r\n  <tr><td>endTime</td><td>Integer</td><td>end offset.</td></tr>\r\n</table>\r\n\r\n## Methods\r\n\r\n### parseFile(filepath, callback)\r\nParse the given file. The callback returns (error, beatmap).\r\n```javascript\r\n  var parser = require('osu-parser');\r\n\r\n  parser.parseFile('path/to/map.osu', function (err, beatmap) {\r\n    console.log(beatmap);\r\n  });\r\n```\r\n\r\n### parseStream(stream, callback)\r\nParse a stream containing a file content. The callback returns (error, beatmap).\r\n```javascript\r\n  var parser = require('osu-parser');\r\n  var fs     = require('fs');\r\n  var stream = fs.createReadStream('path/to/map.osu');\r\n\r\n  parser.parseStream(stream, function (err, beatmap) {\r\n    console.log(beatmap);\r\n  });\r\n```\r\n\r\n### parseContent(content)\r\nParse the content of a file as a string or a buffer.\r\n```javascript\r\n  var parser  = require('osu-parser');\r\n  var fs      = require('fs');\r\n  var content = fs.readFileSync('path/to/map.osu');\r\n\r\n  var beatmap = parser.parseContent(content);\r\n```\r\n\r\n## TODO\r\n- translate the samplesetId of timing points\r\n- parse events\r\n- compute max score\r\n- evaluate map difficulty ? (probably too complicated)\r\n- add a synchronous version of parseFile\r\n- support taiko, CTB and osu!mania ? (not sure that would be useful)\r\n- make it usable in a browser ? (not sure that would be useful)\r\n- ...\r\n\r\n**Feel free to make suggestions !**\r\n",
  "readmeFilename": "README.md",
  "_id": "osu-parser@0.2.0",
  "dist": {
    "shasum": "ab8e1816cb6bfb09b3c41e56490b2a4a73ff1abb"
  },
  "_from": "osu-parser@",
  "_resolved": "https://registry.npmjs.org/osu-parser/-/osu-parser-0.2.0.tgz"
}
